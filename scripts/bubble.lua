---Âêπ„ÅçÂá∫„Åó„Ç®„É¢„Éº„Éà„ÅÆÁµµÊñáÂ≠ó„ÅÆÁ®ÆÈ°û
---@alias Bubble.BubbleType
---| "GOOD" üëç
---| "HEART" üíó
---| "QUESTION" ‚ùì
---| "RELOAD" ÂºæËñ¨„Çí„É™„É≠„Éº„Éâ„Åô„ÇãÁµµÊñáÂ≠ó

---@class Bubble Âêπ„ÅçÂá∫„Åó„Ç®„É¢„Éº„Éà„ÇíÁÆ°ÁêÜ„Åô„Çã„ÇØ„É©„Çπ
Bubble = {
    ---Âêπ„ÅçÂá∫„Åó„ÅÆË°®Á§∫ÊôÇÈñì„ÇíÊ∏¨„Çã„Ç´„Ç¶„É≥„Çø„Éº
    ---@type number
    Count = 0,

    ---Âêπ„ÅçÂá∫„Åó„ÅÆ„Éà„É©„É≥„Ç∏„Ç∑„Éß„É≥„ÇíÊ∏¨„Çã„Ç´„Ç¶„É≥„Çø„Éº
    ---@type number
    TransitionCount = 0,

    ---„Åì„ÅÆ„ÉØ„Éº„É´„Éâ„É¨„É≥„ÉÄ„Éº„Åß„É¨„É≥„ÉÄ„ÉºÂá¶ÁêÜ„ÇíË°å„Å£„Åü„Åã„Å©„ÅÜ„Åã
    ---@type boolean
    IsRenderProcessed = false,

    ---Âêπ„ÅçÂá∫„Åó„Ç®„É¢„Éº„Éà„ÇíÂÜçÁîü„Åô„Çã„ÄÇ
    ---@param type Bubble.BubbleType ÂÜçÁîü„Åô„ÇãÁµµÊñáÂ≠ó„ÅÆÁ®ÆÈ°û
    play = function (self, type)
        self.Count = 40
        models.models.bubble.Camera.AvatarBubble:setVisible(true)
        if events.TICK:getRegisteredCount("bubble_tick") == 0 then
            events.TICK:register(function ()
                models.models.bubble.Gui.FirstPersonBubble:setVisible(renderer:isFirstPerson())
                if not client:isPaused() then
                    self.Count = math.max(self.Count - 1, 0)
                end
            end, "bubble_tick")
        end
        if events.RENDER:getRegisteredCount("bubble_render") == 0 then
            events.RENDER:register(function (_, context)
                models.models.bubble.Camera.AvatarBubble:setVisible(context ~= "OTHER")
                if not self.IsRenderProcessed then
                    if not client:isPaused() then
                        if self.Count > 0 then
                            self.TransitionCount = math.min(self.TransitionCount + 32 / client:getFPS(), 1)
                        else
                            self.TransitionCount = math.max(self.TransitionCount - 32 / client:getFPS(), 0)
                            if self.TransitionCount == 0 then
                                for _, modelPart in ipairs({models.models.bubble.Camera.AvatarBubble, models.models.bubble.Gui.FirstPersonBubble}) do
                                    modelPart:setVisible(false)
                                end
                                events.TICK:remove("bubble_tick")
                                events.RENDER:remove("bubble_render")
                                events.WORLD_RENDER:remove("bubble_world_render")
                            end
                        end
                    end
                    models.models.bubble.Camera.AvatarBubble:setScale(vectors.vec3(1, 1, 1):scale(self.TransitionCount))
                    if host:isHost() then
                        local windowSize = client:getScaledWindowSize()
                        models.models.bubble.Gui.FirstPersonBubble:setPos(-windowSize.x + 15, -windowSize.y + 15, 0)
                        models.models.bubble.Gui.FirstPersonBubble:setScale(vectors.vec3(1, 1, 1):scale(self.TransitionCount * 4))
                    end
                    self.IsRenderProcessed = true
                end
            end, "bubble_render")
        end
        if events.WORLD_RENDER:getRegisteredCount("bubble_world_render") == 0 then
            events.WORLD_RENDER:register(function ()
                self.IsRenderProcessed = false
            end, "bubble_world_render")
        end
    end,

    ---Âêπ„ÅçÂá∫„Åó„Ç®„É¢„Éº„Éà„ÇíÂÅúÊ≠¢„Åô„Çã„ÄÇ
    stop = function (self)
        self.Count = 0
    end,

    ---ÂàùÊúüÂåñÈñ¢Êï∞
    init = function ()
        models.models.bubble:addChild(models:newPart("Gui", "Gui"))
        ---@diagnostic disable-next-line: redundant-parameter
        models.models.bubble.Gui:addChild(models.models.bubble.Camera.AvatarBubble:copy("FirstPersonBubble"))
        for _, modelPart in ipairs({models.models.bubble.Camera.AvatarBubble, models.models.bubble.Gui.FirstPersonBubble}) do
            modelPart:setScale(0, 0, 0)
        end
    end
}

Bubble.init()

return Bubble